{"version":3,"sources":["components/Navbar.tsx","components/Field.tsx","components/constants/AppConsatnts.ts","model/createCells.ts","model/moveCells.ts","components/GameField.tsx","model/removeEnlargeCell.ts","model/addFieldCell.ts","assets/rs_school.svg","components/footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","score","className","href","FieldCells","x","y","value","color","Math","log2","coordinateX","coordinateY","style","transform","backgroundColor","Field","cells","map","item","id","Background","cellsBackground","i","push","DIRECTION","CELLSTATE","createCellsObj","cellState","createCell","random","uniqueId","createStartingCells","cell1","cell2","moveCells","InputCells","direction","cloneDeep","cellMatrix","Array","from","length","fill","forEach","cell","rotated","rotateTo","rotattion","matrix","rotate","moveMatrix","prevCell","changeMatrix","cellSetCurrentValue","keyToDirection","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","KeyA","KeyD","KeyW","KeyS","GameField","setScore","returnObj","JSON","parse","localStorage","getItem","returnScore","useState","setCells","console","log","useEffect","autoplay","setPlay","handleKeypress","e","upgradeCells","event","code","filter","alert","removeEnlargeCell","newCoord","Set","add","size","startSize","sum","r","addFieldCell","document","addEventListener","removeEventListener","serialObjCell","stringify","setItem","serialObjScore","saveGame","onClick","clearInterval","state","right","down","setInterval","autoPlay","Footer","position","bottom","left","width","target","src","RSScool","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2b0c3f2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Navbar: React.FC<{ score: number }> = ({ score }) =>\r\n// const [score, setscore] = useState(0);\r\n  (\r\n    <nav>\r\n      <div className=\"nav-wrapper\">\r\n        <a href=\"/\" className=\"center brand-logo\">2048 Game</a>\r\n        <p className=\"left on-med-and-down score\">\r\n          Score:\r\n          <span>{score}</span>\r\n        </p>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li><a href=\"\">First</a></li>\r\n          <li><a href=\"\">Second</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n\r\nexport default Navbar;\r\n","import { type } from 'os';\r\nimport React from 'react';\r\nimport './field.css';\r\n\r\nexport type FieldProps = {\r\n  cells: {\r\n    x: number,\r\n    y: number,\r\n    id: string | number,\r\n    value: number,\r\n  }[]\r\n};\r\n\r\ntype FieldCellsProps = {\r\n  x: number,\r\n  y: number,\r\n  key: string | number,\r\n  value: number,\r\n};\r\n\r\nconst FieldCells = ({ x, y, value }: FieldCellsProps) => {\r\n  const color = (Math.log2(value) - 1) * 10;\r\n  const coordinateX = (x * 100);\r\n  const coordinateY = (y * 100);\r\n  return (\r\n    <div\r\n      className=\"field-cells\"\r\n      style={{\r\n        transform: `translate(${coordinateX}px, ${coordinateY}px)`,\r\n        backgroundColor: `hsl(0, ${color}%, 68%)`,\r\n      }}\r\n    >\r\n      {value}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Field = ({ cells }: FieldProps) => (\r\n\r\n  <div className=\"field\">\r\n    <Background />\r\n    {\r\n                cells.map((item) => (\r\n                  <FieldCells\r\n                    x={item.x}\r\n                    y={item.y}\r\n                    key={item.id}\r\n                    value={item.value}\r\n                  />\r\n                ))\r\n            }\r\n  </div>\r\n);\r\n\r\nexport const Background = () => {\r\n  const cellsBackground = [];\r\n  for (let i = 0; i < 16; i++) {\r\n    cellsBackground.push(<div key={i} className=\"background-cells\" />);\r\n  }\r\n  return (\r\n    <>{cellsBackground}</>\r\n\r\n  );\r\n};\r\n","export const DIRECTION = {\r\n    UP: 'UP',\r\n    DOWN: 'DOWN',\r\n    LEFT: 'LEFT',\r\n    RIGHT: 'RIGHT',\r\n}\r\n\r\nexport const CELLSTATE = {\r\n    IDLE: 'IDLE', \r\n    MOVING: 'MOVING',\r\n    REMOVE: 'REMOVE',\r\n    ENLARGE: 'ENLARGE',\r\n}","import { uniqueId, random } from 'lodash';\r\nimport { CELLSTATE } from '../components/constants/AppConsatnts'\r\n\r\nexport const createCellsObj = (x: number, y: number, value: number, id: any, cellState:string) => ({\r\n  x,\r\n  y,\r\n  value,\r\n  id,\r\n  cellState,\r\n});\r\n\r\nexport const createCell = () => createCellsObj(random(0, 3), random(0, 3), 2, uniqueId(), CELLSTATE.IDLE);\r\n\r\nexport const createStartingCells = () => {\r\n  const cell1 = createCell();\r\n  const cell2 = createCell();\r\n  if (cell1.x === cell2.x && cell1.y === cell2.y) {\r\n    cell2.y = cell2.y === 0 ? 1 : cell2.y - 1;\r\n  }\r\n  return [cell1, cell2];\r\n};\r\n\r\n\r\n\r\n","import {\r\n  cloneDeep,\r\n} from 'lodash';\r\n//@ts-ignore\r\nimport { rotate } from '2d-array-rotation';\r\nimport { CELLSTATE } from '../components/constants/AppConsatnts'\r\n\r\n\r\nexport type cellsType = {\r\n  x: number, \r\n  y: number, \r\n  value: number, \r\n  id: string | number,\r\n  cellState: string,\r\n}[];\r\n\r\nconst moveCells = (InputCells: cellsType, direction: string):cellsType => {\r\n \r\n\r\n  const cells = cloneDeep(InputCells);\r\n  let cellMatrix: any = Array.from({ length: 4 }, () => new Array(4).fill(0));\r\n  cells.forEach((cell) => { cellMatrix[cell.y][cell.x] = cell; });\r\n  let rotated = false;\r\n\r\n  const rotateTo = (rotattion: string, matrix: cellsType) => {\r\n    switch (rotattion) {\r\n      case 'DOWN':\r\n        matrix = rotate(matrix, 180);\r\n        break;\r\n      case 'RIGHT':\r\n        matrix = rotated ? rotate(matrix, 90) : rotate(matrix, -90);\r\n        break;\r\n      case 'LEFT':\r\n        matrix = rotated ? rotate(matrix, -90) : rotate(matrix, 90);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    rotated = true;\r\n    return matrix;\r\n  };\r\n\r\n  function moveMatrix(matrix: any, x: number , y: number) {\r\n    let prevCell = y - 1;\r\n    while (prevCell >= 0) {\r\n      if (!matrix[prevCell][x]) {\r\n        matrix[prevCell][x] = matrix[y][x];\r\n        matrix[y][x].cellState = CELLSTATE.MOVING;\r\n        matrix[y][x] = 0;\r\n        y = prevCell;\r\n      } else if (matrix[prevCell][x].value === matrix[y][x].value && \r\n        (matrix[prevCell][x].cellState === CELLSTATE.IDLE || \r\n          matrix[prevCell][x].cellState === CELLSTATE.MOVING)){\r\n        matrix[prevCell][x].cellState = CELLSTATE.REMOVE;\r\n        matrix[y][x].cellState = CELLSTATE.ENLARGE;\r\n        matrix[prevCell][x] = matrix[y][x];\r\n        matrix[y][x] = 0;\r\n        y = prevCell;\r\n      }\r\n      else break;\r\n      prevCell -= 1;\r\n    }\r\n  }\r\n\r\n  function cellSetCurrentValue(matrix: any) {\r\n    const changeMatrix = matrix;\r\n    for (let y = 0; y < 4; y += 1) {\r\n      for (let x = 0; x < 4; x += 1) {\r\n        if (matrix[y][x] !== 0) {\r\n          changeMatrix[y][x].y = y;\r\n          changeMatrix[y][x].x = x;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  cellMatrix = direction === 'UP' ? cellMatrix : rotateTo(direction, cellMatrix);\r\n  for (let y = 0; y < 4; y += 1) {\r\n    for (let x = 0; x < 4; x += 1) {\r\n      if (cellMatrix[y][x] !== 0) {\r\n        moveMatrix(cellMatrix, x, y);\r\n      }\r\n    }\r\n  }\r\n\r\n  cellMatrix = direction === 'UP' ? cellMatrix : rotateTo(direction, cellMatrix);\r\n  cellSetCurrentValue(cellMatrix);\r\n\r\n  return cells;\r\n};\r\nexport {moveCells};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Field } from './Field';\r\nimport { createStartingCells } from '../model';\r\nimport { moveCells } from '../model/moveCells';\r\nimport { DIRECTION } from './constants/AppConsatnts';\r\nimport { removeEnlargeCell } from '../model/removeEnlargeCell';\r\nimport { addFieldCell } from '../model/addFieldCell'\r\nimport { cellsType } from '../model/moveCells'\r\nimport useSound from 'use-sound';\r\n\r\nconst keyToDirection: any = {\r\n  ArrowLeft: DIRECTION.LEFT,\r\n  ArrowRight: DIRECTION.RIGHT,\r\n  ArrowUp: DIRECTION.UP,\r\n  ArrowDown: DIRECTION.DOWN,\r\n  KeyA: DIRECTION.LEFT,\r\n  KeyD: DIRECTION.RIGHT,\r\n  KeyW: DIRECTION.UP,\r\n  KeyS: DIRECTION.DOWN,\r\n}\r\n\r\nconst GameField: React.FC<{ setScore: Function, score: number }> = ({ setScore, score }) => {\r\n  //@ts-ignore\r\n  const returnObj = JSON.parse(localStorage.getItem(\"myCells\"));\r\n  //@ts-ignore\r\n  const returnScore = JSON.parse(localStorage.getItem(\"myScore\"));\r\n  const [cells, setCells] = useState<cellsType>(createStartingCells());\r\n  if(returnObj){\r\n   console.log(returnObj);\r\n    useEffect(() =>{\r\n    setCells(cells =>[...returnObj]);\r\n    setScore(returnScore);\r\n  }, [])}\r\n  \r\n  \r\n  const [autoplay, setPlay] = useState('Start');\r\n  const [interval, setInt] = useState();\r\n  const handleKeypress = (e: KeyboardEvent) => { upgradeCells(e, ''); };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleKeypress);\r\n    return function cleanup() {\r\n      document.removeEventListener('keydown', handleKeypress);\r\n    };\r\n  }, []);\r\n\r\n  function autoPlay(state: string) {\r\n    let right;\r\n    let down;\r\n    if (state === 'Start') {\r\n      right = setInterval(() => {\r\n        upgradeCells(null, DIRECTION.RIGHT)\r\n      }, 500);\r\n      down = setInterval(() => {\r\n        upgradeCells(null, DIRECTION.DOWN)\r\n      }, 500);\r\n    } else {\r\n      clearInterval(right);\r\n      clearInterval(down);\r\n    }\r\n\r\n  }\r\n\r\n  function upgradeCells(event: KeyboardEvent | null, direction: string) {\r\n    setCells(cells => event ? moveCells(cells, keyToDirection[event.code]) : moveCells(cells, direction));\r\n    setCells(cells => removeEnlargeCell(cells));\r\n    setCells(cells => addFieldCell(cells));\r\n    //@ts-ignore\r\n    setScore(score => score + 2);\r\n  }\r\n\r\n  useEffect(() => {\r\n    saveGame(cells, score);\r\n  })\r\n\r\n  function saveGame(cells: cellsType, score: number){\r\n    let serialObjCell = JSON.stringify(cells);\r\n    localStorage.setItem(\"myCells\", serialObjCell);\r\n    let serialObjScore = JSON.stringify(score);\r\n    localStorage.setItem(\"myScore\", serialObjScore);\r\n    \r\n    console.log(returnObj);\r\n  }\r\n\r\n  function newGame() {\r\n    setCells(cells => createStartingCells());\r\n    setScore(0);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"waves-effect waves-light btn\" onClick={newGame}>New Game</button>\r\n      <button className=\"waves-effect waves-light btn\" onClick={() => {\r\n        let x;\r\n        if (autoplay === 'Start') {\r\n          setPlay('Stop')\r\n          //@ts-ignore\r\n        } else {\r\n          setPlay('Stop')\r\n          console.log(x);\r\n          clearInterval();\r\n        }\r\n        autoPlay(autoplay);\r\n\r\n      }}>Autoplay {autoplay}</button>\r\n      <Field cells={cells} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameField;\r\n","import { CELLSTATE } from './../components/constants/AppConsatnts';\r\nimport { cellsType } from './moveCells';\r\nexport function removeEnlargeCell(cells: cellsType) {\r\n    const newCell = cells.filter(cell => cell.cellState !== CELLSTATE.REMOVE)\r\n        .map(cell => {\r\n        if(cell.cellState === CELLSTATE.ENLARGE){\r\n            cell.value *= 2;\r\n            if(cell.value === 2048){\r\n                alert('You Win!');\r\n            }\r\n        }\r\n        cell.cellState = CELLSTATE.IDLE;\r\n        return cell;\r\n    })\r\n    return newCell;\r\n}","import { createCellsObj } from './createCells'\r\nimport { cellsType } from './moveCells'\r\nimport { uniqueId, random } from 'lodash';\r\n\r\nexport function addFieldCell(cells:cellsType) {\r\n    const newCoord = new Set();\r\n\r\n    cells.forEach(cell => {\r\n        newCoord.add(cell.x * 4 + cell.y)\r\n    })\r\n\r\n    if(newCoord.size === 16) return cells;\r\n\r\n    let x;\r\n    let y;\r\n    let startSize = newCoord.size;\r\n    do{\r\n        x = random(0, 3);\r\n        y = random(0, 3);\r\n        const sum = x * 4 + y;\r\n        newCoord.add(sum);\r\n    } while (startSize === newCoord.size);\r\n    const r = random(0, 9)\r\n\r\n\r\n    return ([...cells,r <= 7 ? createCellsObj(x, y, 2, uniqueId(), 'IDLE') : createCellsObj(x, y, 4, uniqueId(), 'IDLE')]);\r\n}","export default __webpack_public_path__ + \"static/media/rs_school.b974d406.svg\";","import React, { useState } from 'react';\r\nimport RSScool from '../assets/rs_school.svg'\r\n\r\nexport const Footer: React.FC = () => {\r\n    \r\n    return (\r\n        <footer className=\"page-footer\" style={{position:'fixed',bottom:0,left:0,width:'100%',}}>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col l6 s12\">\r\n                <h5 className=\"white-text\">2048 GAME</h5>\r\n              </div>\r\n              <div className=\"col l4 offset-l2 s12\">\r\n                <ul>\r\n                  <li><a className=\"grey-text text-lighten-3\" href=\"https://github.com/ArseniyXaoc\">Github</a></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"footer-copyright\">\r\n            <div className=\"container\">\r\n            © 2020 RS Scool Arseniy Buryachek\r\n            <a className=\"grey-text text-lighten-4 right\" target=\"_blank\" href=\"https://rs.school/\"><img src={RSScool} alt=\"\"/>rs.school</a>\r\n            \r\n            </div>\r\n          </div>\r\n        </footer>\r\n    );\r\n  };","import React, { useState } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport GameField from './components/GameField';\r\nimport { Footer } from './components/footer'\r\n\r\nconst App: React.FC = () => {\r\n  const [score, setScore] = useState(1);\r\n  function resetScore() {\r\n    setScore(score + 2);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header><Navbar score={score} /></header>\r\n      <main>        \r\n        <div className=\"container\">\r\n          <h1></h1>\r\n        </div>\r\n        <GameField setScore={setScore} score={score} />\r\n        \r\n      </main>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\r\nimport '../node_modules/materialize-css/dist/js/materialize';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}